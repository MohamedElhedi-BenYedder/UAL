// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2019 02:14:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          unitarithlogic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module unitarithlogic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg A2;
reg A3;
reg A4;
reg B1;
reg B2;
reg s1_ou_B3;
reg s2_ou_B4;
reg s3_and_get;
reg SEL_OR_CALC;
reg SHIFT;
// wires                                               
wire o1;
wire o2;
wire o3;
wire o4;
wire o5;
wire o6;
wire o7;
wire o8;
wire sa0;
wire sa1;
wire sa2;
wire sa3;
wire sb0;
wire sb1;
wire sb2;
wire sb3;
wire sc0;
wire sc1;
wire sc2;
wire sc3;
wire sd0;
wire sd1;
wire sd2;
wire sd3;
wire se0;
wire se1;
wire se2;
wire se3;
wire sf0;
wire sf1;
wire sf2;
wire sf3;
wire sg0;
wire sg1;
wire sg2;
wire sg3;

// assign statements (if any)                          
unitarithlogic i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.B1(B1),
	.B2(B2),
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.o4(o4),
	.o5(o5),
	.o6(o6),
	.o7(o7),
	.o8(o8),
	.s1_ou_B3(s1_ou_B3),
	.s2_ou_B4(s2_ou_B4),
	.s3_and_get(s3_and_get),
	.sa0(sa0),
	.sa1(sa1),
	.sa2(sa2),
	.sa3(sa3),
	.sb0(sb0),
	.sb1(sb1),
	.sb2(sb2),
	.sb3(sb3),
	.sc0(sc0),
	.sc1(sc1),
	.sc2(sc2),
	.sc3(sc3),
	.sd0(sd0),
	.sd1(sd1),
	.sd2(sd2),
	.sd3(sd3),
	.se0(se0),
	.se1(se1),
	.se2(se2),
	.se3(se3),
	.SEL_OR_CALC(SEL_OR_CALC),
	.sf0(sf0),
	.sf1(sf1),
	.sf2(sf2),
	.sf3(sf3),
	.sg0(sg0),
	.sg1(sg1),
	.sg2(sg2),
	.sg3(sg3),
	.SHIFT(SHIFT)
);
initial 
begin 
#1000000 $finish;
end 

// A1
initial
begin
	A1 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
end 

// A4
initial
begin
	A4 = 1'b0;
	A4 = #150000 1'b1;
	A4 = #130000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// s1_ou_B3
initial
begin
	s1_ou_B3 = 1'b0;
end 

// s2_ou_B4
initial
begin
	s2_ou_B4 = 1'b0;
	s2_ou_B4 = #150000 1'b1;
	s2_ou_B4 = #130000 1'b0;
end 

// s3_and_get
initial
begin
	s3_and_get = 1'b0;
end 

// SEL_OR_CALC
initial
begin
	SEL_OR_CALC = 1'b0;
	SEL_OR_CALC = #10000 1'b1;
	SEL_OR_CALC = #40000 1'b0;
end 

// SHIFT
initial
begin
	SHIFT = 1'b0;
end 
endmodule

